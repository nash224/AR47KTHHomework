
//  {}을 사용하기 위해서는 이름이 있어야함
//  실행 흐름은 메모리를 사용하기 때문이다.
//  함수는 하나의 특별한 목적을 수행하기 위해 독립적인 실행흐름을 만드는 것이다.

//  함수를 사용하면 반복적인 프로그래밍을 피할 수 있어, 가독성 개선되고 및 유지보수가 쉬워진다.

     //  함수의 선언은 반환 자료형 함수의 이름(매개변수 목록)으로 구성된다.
//  리턴값 / 함수의 이름 / 이 함수로 보낼 메모리
void StartFunc(int Para1, int Para2)    //  인자는 그 실행흐름의 지역변수이다.
//  void면 아무것도 보내지 않음
{
    {
        int result;
        result = Para1 + Para2;
    }

    //  리턴값의 의미는 수행하는 함수의 결과를 외부로 데이터를 전달할때 사용하는 값이다.
    //  리턴을 사용한 즉시 함수의 실행흐름은 종료된다.
    return;
}

//  main scope
int main()
{// 함수의 시작
    //  실행 흐름의 시작

    {// 이름이 없는 main함수에 실행흐름을 생성
        //  이를 Unnamed scope라고 한다.


    }
    
    //  함수의 실행방법은 F11을 눌러 다른 이름의 실행흐름의 내부로 프로시저를 확인할 수 있다.
    StartFunc(10, 20);
    
}// 함수의 끝
//  실행 흐름의 끝

//  프로그램은 실행되기 위해서 메모리에 로드되야한다.
//  프로그램에서 사용되는 변수들을 저장할 메모리도 필요하다.

//  프로그램의 실행은 코드영역 > 데이터영역 > 힘영역 > 스택영역으로 구분된다.
//  코드영역은 exe파일로 메모리에 실행할 프로그램의 코드와 상수를 갖고 있다.
//  스택영역에서는 실행할 프로그램의 실행흐름에 필요한 메모리를 확보한 후 새로운 흐름이 실행되면 할당되었다
//  종료되면 소멸한다.  
//  즉 순차적으로 함수의 호출이 끝나면 순차적으로 소멸된다.